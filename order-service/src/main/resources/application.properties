spring.application.name=order-service
server.port=8080

# ============== DATABASE CONFIGURATION ==============
spring.datasource.url=jdbc:postgresql://localhost:5433/order_db
spring.datasource.username=user
spring.datasource.password=mysecretpassword

# ============== JPA/HIBERNATE CONFIGURATION ==============
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=true

# ============== FLYWAY CONFIGURATION ==============
spring.flyway.url=${spring.datasource.url}
spring.flyway.user=${spring.datasource.username}
spring.flyway.password=${spring.datasource.password}

# ============== KAFKA PRODUCER CONFIGURATION ==============
# Address of the Kafka broker(s). We'll run this in Docker.
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer

# --- NEW: CONSUMER SETTINGS ---
# A unique group ID for this service's consumers.
spring.kafka.consumer.group-id=order-service-group
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# Trust all packages for deserialization. In production, you'd list specific packages.
spring.kafka.consumer.properties.spring.json.trusted.packages=*